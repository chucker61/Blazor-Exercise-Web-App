<div hidden="@IsHidden">
    <video id="video" width="640" height="480" style="display:none" />

    <MudGrid Class="mt-5" Justify="Justify.Center">
        <MudText Typo="Typo.h3">@(Exercise is null ? "Loading..." : Exercise.Name)</MudText>
    </MudGrid>

    <MudGrid Class="mt-5" Justify="Justify.Center">
        <MudItem Class="rounded" Style="@($"background:{Theme.Palette.Dark};")">
            <canvas @ondblclick="OnDblClickCallBack" id="overlay" width="640" height="480" style="transform:rotate(180deg);-webkit-transform:rotateY(180deg);-moz-transform:rotateY(180deg)" />
        </MudItem>
    </MudGrid>
    <br />
    <MudGrid Class="mt-5 gap-4" Justify="Justify.Center">
        <MudButton hidden="@StartButtonHidden" Disabled="StartButtonDisable" @onclick="StartVideo" Variant="Variant.Filled" Color="Color.Primary">Başlat</MudButton>
        <MudProgressCircular hidden="@Progress" Color="Color.Primary" Size="Size.Small" Indeterminate="@(!Progress)" />
    </MudGrid>
</div>

<style>
    #overlay {
        transform: rotateY(180deg);
        -webkit-transform: rotateY(180deg);
        -moz-transform: rotateY(180deg);
    }
</style>



@code {
    [Inject]
    IJSRuntime JSRuntime { get; set; }

    [Parameter]
    public Exercise Exercise { get; set; }
    [Parameter]
    public bool IsHidden { get; set; }
    [Parameter]
    public bool StartButtonHidden { get; set; }
    [Parameter]
    public EventCallback OnDblClickCallBack { get; set; }

    private MudTheme Theme = new MudTheme();
    private bool Progress { get; set; } = true;
    public bool StartButtonDisable { get; set; } = false;


    private async Task StartVideo()
    {
        StartButtonDisable = true;
        Progress = false;
        await JSRuntime.InvokeVoidAsync("estimatePose", Exercise.Name);
        Progress = true;
        StartButtonHidden = true;
        StartButtonDisable = false;
    }

    private async Task StopVideo()
    {
        await JSRuntime.InvokeVoidAsync("quitExercise");
    } 

}
