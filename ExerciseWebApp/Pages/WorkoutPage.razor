@page "/workout/{id:int}"
@inject PageHistoryService _pageHistory;

<MudGrid Justify="Justify.SpaceBetween">
    <MudIconButton Edge="Edge.Start" Icon="@Icons.Material.Filled.ArrowBackIos" href="/"></MudIconButton>
    <MudIconButton Color="Color.Error" Edge="Edge.End" Size="Size.Large" Icon="@Icons.Material.Filled.History"></MudIconButton>
</MudGrid>

<MudGrid Justify="Justify.Center" Class="mt-5">
    <MudText Typo="Typo.h3">@(Workout is null ? "Loading..." : Workout.Name)</MudText>
</MudGrid>

<MudGrid Justify="Justify.Center" Class="mt-5">
    @if (Workout is not null)
    {
        <MudItem xs="2" Class="d-flex align-center justify-center">
        </MudItem>
        <MudItem xs="8" Class="d-flex justify-center">
            <MudStack>
                @foreach (var exercise in Workout.Exercises)
                {
                    <MudTooltip ShowOnHover=false ShowOnFocus=true Color="Color.Transparent">
                        <ChildContent>
                            <MudButton>
                                <MudPaper Elevation="4" Class="d-flex pa-4 overflow-x-hidden" Style="@(exercise.IsDone ? $"background:{Colors.Green.Lighten3};" : $"background:{Colors.Grey.Darken3}")">
                                    <MudText Class="d-flex align-center">
                                        <div hidden="@(!exercise.IsDone)">
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Class="mr-3"></MudIcon>
                                        </div>
                                        @exercise.Name
                                    </MudText>
                                </MudPaper>
                            </MudButton>
                        </ChildContent>
                        <TooltipContent>
                            <MudGrid Justify="Justify.Center">
                                <MudItem xs="4" Class="grey rounded">
                                    <a href="@exercise.VideoLink" target="_blank">@exercise.VideoLink</a>
                                    <MudText Typo="Typo.body1">@exercise.Description</MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.Star" />
                                </MudItem>
                            </MudGrid>
                        </TooltipContent>
                    </MudTooltip>
                }
            </MudStack>
        </MudItem>
        <MudItem xs="2" Class="d-flex align-center justify-center">
        </MudItem>
    }
    else
    {
        <MudText Typo="Typo.body1">Loading...</MudText>
    }
</MudGrid>

<MudGrid hidden="@ContinueButtonHidden" Class="d-flex justify-center mt-5">
    <MudText Typo="Typo.h6">Next Exercise: @(CurrentExercise is null ? "Loading..." : CurrentExercise.Name)</MudText>
</MudGrid>

<MudGrid hidden="@StartButtonHidden" Class="d-flex justify-center mt-5">
    <MudIconButton Color="Color.Success" OnClick="() => StartExercise()" Size="Size.Large" Icon="@Icons.Material.Filled.PlayCircle"></MudIconButton>
</MudGrid>


<MudGrid Justify="Justify.Center" Class="mt-5">
    @if (Workout is not null)
    {
        <ExerciseComponent OnDblClickCallBack="@FinishExercise" StartButtonHidden=@StartButtonHidden IsHidden="@ExerciseHidden" Exercise="CurrentExercise"></ExerciseComponent>
    }
    else
    {
        <MudText Typo="Typo.body1">Loading...</MudText>
    }
</MudGrid>

<MudGrid hidden="@ContinueButtonHidden" Justify="Justify.Center" Class="mt-10">
    <MudButton Variant=Variant.Filled Color="Color.Primary" @onclick="StartVideo">Start Exercise</MudButton>
</MudGrid>





@code {

    [Inject]
    public LocalStorageService _local { get; set; }
    [Inject]
    public NavigationManager _navigationManager { get; set; }
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Parameter]
    public int Id { get; set; }

    public bool ExerciseHidden { get; set; } = true;
    public bool StartButtonHidden { get; set; } = false;
    public bool ContinueButtonHidden { get; set; } = true;

    private Workout Workout { get; set; }
    private Exercise CurrentExercise { get; set; }

    private int _exerciseCounter = 0;

    protected async override Task OnInitializedAsync()
    {
        Workout = await _local.GetOneWorkoutAsync(Id);
        CurrentExercise = Workout.Exercises[_exerciseCounter];
        _pageHistory.AddPageToHistory($"/workout/{Id}");
    }

    private void StartExercise()
    {
        StartButtonHidden = true;
        ContinueButtonHidden = false;
    }

    private async Task StartVideo()
    {
        ExerciseHidden = false;
        await JSRuntime.InvokeVoidAsync("estimatePose", CurrentExercise.Name);
    }

    private async Task FinishExercise()
    {
        await JSRuntime.InvokeVoidAsync("quitExercise");
        CurrentExercise.IsDone = true;
        if (_exerciseCounter < Workout.Exercises.Count - 1)
        {
            ExerciseHidden = true;
            ContinueButtonHidden = false;
            _exerciseCounter++;
            StartButtonHidden = true;
        }
        else
        {
            foreach (var exercise in Workout.Exercises)
            {
                _exerciseCounter = 0;
                ExerciseHidden = true;
                exercise.IsDone = false;
                ContinueButtonHidden = true;
                StartButtonHidden = false;
            }
        }
    }
}
