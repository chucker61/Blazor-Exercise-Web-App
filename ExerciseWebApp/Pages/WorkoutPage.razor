@page "/workout/{id:int}"
@inject PageHistoryService _pageHistory;
<MudGrid Justify="Justify.SpaceBetween">
    @if (_pageHistory.CanGoBack())
    {
        <MudIconButton Edge="Edge.Start" Icon="@Icons.Material.Filled.ArrowBackIos" href="@_pageHistory.GetGoBackPage()">Go Back</MudIconButton>

    }
    <MudIconButton Color="Color.Error" Edge="Edge.End" Size="Size.Large" Icon="@Icons.Material.Filled.History"></MudIconButton>

</MudGrid>

<MudGrid Justify="Justify.Center" Class="mt-5">
    <MudText Typo="Typo.h3">@(Workout is null ? "Loading..." : Workout.Name)</MudText>
</MudGrid>

<MudGrid Justify="Justify.Center" Class="mt-5">
    @if (Workout is not null)
    {
        <MudItem xs="2" Class="d-flex align-center justify-center">
        </MudItem>
        <MudItem xs="8">
            @foreach (var exercise in Workout.Exercises)
            {
                <MudPaper Elevation="4" Class="pa-4 mt-5 overflow-x-hidden">
                    <MudText Class="d-flex align-center">
                        <div hidden="@(!exercise.IsDone)">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Class="mr-3"></MudIcon>
                        </div>
                        @exercise.Name
                    </MudText>
                </MudPaper>
            }
        </MudItem>
        <MudItem xs="2" Class="d-flex align-center justify-center">
        </MudItem>
    }
    else
    {
        <MudText Typo="Typo.body1">Loading...</MudText>
    }
</MudGrid>
<div>
    <MudGrid Class="d-flex justify-center mt-5">
        <MudIconButton Color="Color.Success" OnClick="() => StartExercise()" Size="Size.Large" Icon="@Icons.Material.Filled.PlayCircle"></MudIconButton>
    </MudGrid>
</div>

<MudGrid Justify="Justify.Center" Class="mt-5">
    @if (Workout is not null)
    {
        <ExerciseComponent IsHidden="@ExerciseHidden" Exercise="@Workout.Exercises[_exerciseCounter]"></ExerciseComponent>
    }
    else
    {
        <MudText Typo="Typo.body1">Loading...</MudText>
    }
    <MudButton Variant=Variant.Filled Color="Color.Error" OnClick="() => FinishExercise()">Finish</MudButton>
</MudGrid>



@code {

    [Inject]
    public LocalStorageService _local { get; set; }
    [Inject]
    public NavigationManager _navigationManager { get; set; }

    [Parameter]
    public int Id { get; set; }

    public bool ExerciseHidden { get; set; } = true;

    private Workout Workout { get; set; }

    private int _exerciseCounter = 0;

    protected async override Task OnInitializedAsync()
    {
        Workout = await _local.GetOneWorkoutAsync(Id);
        _pageHistory.AddPageToHistory($"/workout/{Id}");
    }

    private void StartExercise()
    {
        ExerciseHidden = false;

    }

    private void FinishExercise()
    {
        Workout.Exercises[_exerciseCounter].IsDone = true;
        if (_exerciseCounter < Workout.Exercises.Count)
            _exerciseCounter++;
    }
}
