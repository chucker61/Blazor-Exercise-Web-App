@page "/workout/{id:int}"

<MudGrid Justify="Justify.SpaceBetween">
    <MudIconButton Edge="Edge.Start" Icon="@Icons.Material.Filled.ArrowBackIos" href="/"></MudIconButton>
</MudGrid>

<MudGrid Justify="Justify.Center" Class="mt-5">
    <MudText Typo="Typo.h3">@(Workout is null ? "Loading..." : Workout.Name)</MudText>
</MudGrid>

<MudGrid Class="mt-5">
    @if (Workout is not null)
    {
        <MudItem xs="2" Class="d-flex align-center justify-center">
        </MudItem>
        <MudItem xs="8">
            <MudGrid>
                @foreach (var exercise in Workout.Exercises)
                {
                    <MudItem xs="12">
                        <MudPaper Elevation="4" Class="d-flex align-center justify-center mud-width-full py-2 overflow-x-auto" Style="@(exercise.IsDone ? $"background:{Colors.Green.Lighten3};" : $"background:{Colors.Grey.Darken3}")">
                            <MudText Class="d-flex align-center">
                                <div hidden="@(!exercise.IsDone)">
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Class="mr-3"></MudIcon>
                                </div>
                                <MudButton OnClick="() => {}">
                                    <MudStack Justify="Justify.Center">
                                        <h3>@exercise.Name</h3>
                                    </MudStack>
                                </MudButton>
                            </MudText>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
        <MudItem xs="2" Class="d-flex align-center justify-center">
        </MudItem>
    }
    else
    {
        <MudText Typo="Typo.body1">Loading...</MudText>
    }
</MudGrid>

<MudGrid hidden="@(ExerciseInfo)" Class="d-flex justify-center mt-5">
    <MudText Typo="Typo.h6">Next Exercise: @(CurrentExercise is null ? "Loading..." : CurrentExercise.Name)</MudText>
</MudGrid>

<MudGrid hidden="@GlobalHidden" Class="d-flex justify-center mt-5">
    <MudIconButton Color="Color.Success" OnClick="() => StartExercise()" Size="Size.Large" Icon="@Icons.Material.Filled.PlayCircle"></MudIconButton>
</MudGrid>


<MudGrid Justify="Justify.Center" Class="mt-5">
    @if (Workout is not null)
    {
        <ExerciseComponent OnDblClickCallBack="@FinishExercise" IsHidden=@(ExerciseCanvasHidden) Exercise="CurrentExercise"></ExerciseComponent>
    }
    else
    {
        <MudText Typo="Typo.body1">Loading...</MudText>
    }
</MudGrid>

<MudGrid hidden="@(ExerciseInfo)" Justify="Justify.Center" Class="mt-10">
    <MudButton Variant=Variant.Filled Color="Color.Primary" @onclick="StartVideo">Start Exercise</MudButton>
</MudGrid>

<MudGrid hidden="@(FinishedActions)" Justify="Justify.Center" Class="mt-5">
    <MudText Typo="Typo.h4">Congratulations! You have finished the workout!</MudText>
</MudGrid>

<MudGrid hidden="@(FinishedActions)" Justify="Justify.Center" Class="mt-5">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-2" Href="/">Home</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Class="mx-2" @onclick="RestartWorkout">Restart</MudButton>
</MudGrid>





@code {

    [Inject]
    public LocalStorageService _local { get; set; }
    [Inject]
    public NavigationManager _navigationManager { get; set; }
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Parameter]
    public int Id { get; set; }

    public bool ExerciseInfo { get; set; } = true;
    public bool FinishedActions { get; set; } = true;
    public bool ExerciseCanvasHidden { get; set; } = true;
    public bool GlobalHidden { get; set; } = false;

    private Workout Workout { get; set; }

    private int _exerciseCounter = 0;
    private Exercise CurrentExercise { get; set; }

    private List<ExerciseHistory> ExerciseHistories { get; set; } = new List<ExerciseHistory>();

    protected async override Task OnInitializedAsync()
    {
        Workout = await _local.GetOneWorkoutAsync(Id);
        CurrentExercise = Workout.Exercises[_exerciseCounter];
    }

    private void StartExercise()
    {
        GlobalHidden = true;
        ExerciseInfo = false;
    }

    private async Task StartVideo()
    {
        ExerciseCanvasHidden = false;
        await JSRuntime.InvokeVoidAsync("estimatePose", CurrentExercise.Name);
    }

    private async Task FinishExercise()
    {
        await JSRuntime.InvokeVoidAsync("quitExercise");
        CurrentExercise.IsDone = true;
        ExerciseCanvasHidden = true;
        ExerciseHistories.Add(new ExerciseHistory
            {
                Exercise = CurrentExercise,
                Duration = 5
            });

        if (_exerciseCounter < Workout.Exercises.Count - 1)
        {
            _exerciseCounter++;
            CurrentExercise = Workout.Exercises[_exerciseCounter];
        }
        else
        {
            ExerciseInfo = true;
            FinishedActions = false;

            WorkoutHistory history = new()
                {
                    Duration = DateTime.Now,
                    Workout = Workout,
                    ExerciseHistories = ExerciseHistories
                };
            _local.SaveWorkoutHistoryAsync(history);
        }
    }
    private void RestartWorkout()
    {
        _exerciseCounter = 0;
        ExerciseInfo = true;
        FinishedActions = true;
        ExerciseCanvasHidden = true;
        GlobalHidden = false;
        CurrentExercise = Workout.Exercises[_exerciseCounter];
        foreach (var exercise in Workout.Exercises)
        {
            exercise.IsDone = false;
        }
    }
}
