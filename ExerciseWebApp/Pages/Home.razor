@page "/"
@inject IDialogService DialogService
@inject NavigationManager _navigationManager;

<MudGrid Class="align-center mt-5" @ref=this.grid>
    @if (Workouts != null)
    {
        @foreach (var workout in Workouts)
        {
            <MudItem md="6" sm="12" xs="12">
                <MudPaper Class="d-flex align-center justify-space-between mud-width-full py-2 overflow-x-auto" Elevation="5">
                    <MudButton OnClick="() => NavigateToWorkoutPage(workout.Id)">
                        <MudStack Justify="Justify.FlexStart">
                            <h3>@workout.Name</h3>
                        </MudStack>
                    </MudButton>
                    <div>
                        <MudIconButton Color="Color.Warning" OnClick="() => OpenUpdateWorkoutDialog(workout)" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                        <MudIconButton Color="Color.Error" OnClick="() => OpenDeleteWorkoutDialog(workout)" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                    </div>
                </MudPaper>
            </MudItem>
        }
    }
    else
    {
        <p>Loading...</p>
    }
    <MudItem md="6" sm="12" xs="12" Class="d-flex justify-center">
        <MudFab OnClick="@OpenCreateWorkoutDialog" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" />
    </MudItem>
</MudGrid>

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>

@code {
    private MudTheme Theme { get; set; }

    [Inject]
    LocalStorageService LocalStorageService { get; set; }
    public List<Exercise> Exercises {get;set;}

    public List<Workout> Workouts { get; set; }
    private MudGrid grid;

    protected override async Task OnInitializedAsync()
    {
        var unOrderedWorkouts = await LocalStorageService.GetItemAsync<List<Workout>>("workouts");
        if (unOrderedWorkouts is not null)
                Workouts = unOrderedWorkouts.OrderBy(x => x.Id).ToList();
    }

    private void NavigateToWorkoutPage(int id)
    {
        _navigationManager.NavigateTo("/workout/" + id);
    }

    private async Task OpenCreateWorkoutDialog()
    {
        var options = new DialogOptions { ClassBackground = "my-custom-class" };
        var dialog = await DialogService.ShowAsync<CreateWorkoutDialogComponent>("", options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var unOrderedWorkouts = await LocalStorageService.GetItemAsync<List<Workout>>("workouts");
            if (unOrderedWorkouts is not null)
                Workouts = unOrderedWorkouts.OrderBy(x => x.Id).ToList();
        }
    }

    private async Task OpenDeleteWorkoutDialog(Workout workout)
    {
        var options = new DialogOptions { ClassBackground = "my-custom-class" };
        var parameters = new DialogParameters<DeleteWorkoutDialogComponent>();
        parameters.Add(x => x.Workout, workout);
        var dialog = await DialogService.ShowAsync<DeleteWorkoutDialogComponent>("", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var unOrderedWorkouts = await LocalStorageService.GetItemAsync<List<Workout>>("workouts");
            if (unOrderedWorkouts is not null)
                Workouts = unOrderedWorkouts.OrderBy(x => x.Id).ToList();
        }
    }

    private async Task OpenUpdateWorkoutDialog(Workout workout)
    {
        var options = new DialogOptions { ClassBackground = "my-custom-class" };
        var parameters = new DialogParameters<UpdateWorkoutDialogComponent>();
        parameters.Add(x => x.Workout, workout);
        var dialog = await DialogService.ShowAsync<UpdateWorkoutDialogComponent>("", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var unOrderedWorkouts = await LocalStorageService.GetItemAsync<List<Workout>>("workouts");
            if (unOrderedWorkouts is not null)
                Workouts = unOrderedWorkouts.OrderBy(x => x.Id).ToList();
        }
    }
}