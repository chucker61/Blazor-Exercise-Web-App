@page "/exercise/{id:int}"

@inject IJSRuntime JSRuntime

<video id="video" width="640" height="480" style="display:none" />

<MudGrid Class="mt-5" Justify="Justify.Center">
    <MudText Typo="Typo.h3">@(Workout is null ? "Loading..." : Workout.Name)</MudText>
</MudGrid>

<MudGrid Class="mt-5" Justify="Justify.Center">
    <MudItem Class="rounded" Style="@($"background:{Theme.Palette.Dark};")">
        <canvas id="overlay" width="640" height="480" />
    </MudItem>
</MudGrid>
<br />
<MudGrid Class="mt-5 gap-4" Justify="Justify.Center">
    <MudButton @onclick="StartVideo" Variant="Variant.Filled" Color="Color.Primary">Başlat</MudButton>
    <MudProgressCircular hidden="@Progress" Color="Color.Primary" Size="Size.Large" Indeterminate="@(!Progress)" />
    <MudButton @onclick="StopVideo" Variant="Variant.Filled" Color="Color.Secondary">Bitir</MudButton>
</MudGrid>


@code {

    [Inject]
    public LocalStorageService _local { get; set; }

    [Parameter]
    public int Id { get; set; }

    private MudTheme Theme = new MudTheme();
    private object[] keypoints = new object[] { };
    private string result = "";
    private bool Progress { get; set; } = true;
    private Workout Workout { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Workout = await _local.GetOneWorkoutAsync(Id);
    }

    private async Task StartVideo()
    {
        Progress = false;
        keypoints = await JSRuntime.InvokeAsync<object[]>("estimatePose");
        Progress = true;
        foreach (var keypoint in keypoints)
        {
            result += keypoint.ToString();
        }
    }

    private void StopVideo()
    {
        JSRuntime.InvokeVoidAsync("stopVideo");
    }
}
